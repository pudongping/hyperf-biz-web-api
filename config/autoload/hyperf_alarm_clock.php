<?php
/**
 *
 *
 * Created by PhpStorm
 * User: Alex
 * Date: 2023-08-29 23:44
 */
declare(strict_types=1);

return [

    /*
    |--------------------------------------------------------------------------
    | 是否开启代码执行耗时，超时后通知提醒
    |--------------------------------------------------------------------------
    |
    | 只有当此参数设定为 `true` ，并且指定的通知通道所需要的必要参数都存在时，才会触发通知提醒。
    | 比如，假设设定了通知通道包含 `feishu` 因为发送飞书 webhook 通知必须要有密钥，因此只有当
    | ALARM_CLOCK_ENABLE 为 true 并且 ALARM_CLOCK_CHANNEL_FEISHU_WEBHOOK_SECRET 设定
    | 有密钥时，才会发送通知提醒
    |
    */
    'enable' => env('ALARM_CLOCK_ENABLE', false),

    /*
    |--------------------------------------------------------------------------
    | 通知标题
    |--------------------------------------------------------------------------
    |
    */
    'title' => env('ALARM_CLOCK_TITLE', 'alarm-clock'),

    /*
    |--------------------------------------------------------------------------
    | 默认的通知通道
    |--------------------------------------------------------------------------
    |
    | 默认设定为 **标准输出 stdout** 想要同时设定多个通知通道，请使用英文逗号 `,` 进行分隔。比如
    | `feishu,logging`
    |
    */
    'default' => env('ALARM_CLOCK_CHANNEL', 'stdout'),

    /*
    |--------------------------------------------------------------------------
    | 通知通道设置
    |--------------------------------------------------------------------------
    |
    | 键名为通知通道的名称，值为通知通道的必要参数
    | 不同的通道可能所需要的必要参数不一样
    |
    */
    'channels' => [
        'feishu' => [
            'webhook_secret' => env('ALARM_CLOCK_CHANNEL_FEISHU_WEBHOOK_SECRET', ''),
        ],
        'logging' => [
            'group' => env('ALARM_CLOCK_CHANNEL_LOGGING_GROUP', 'default'),
            'name' => env('ALARM_CLOCK_CHANNEL_LOGGING_NAME', 'hyperf'),
        ],
        'stdout',
    ],

    /*
    |--------------------------------------------------------------------------
    | 超时时间及通知类型设置，超时时间支持浮点数，比如：5.5 表示 5s 500ms
    |--------------------------------------------------------------------------
    |
    | 以下默认设置表示为：
    | 当代码执行时间超过 10s 时，以 `warning` 的形式进行通知
    | 当代码执行时间超过 5s 且不足以 10s 时，以 `notice` 的形式进行通知
    | 当代码执行时间不超过 5s 时，不通知。
    |
    */
    'timeout' => [
        'notice' => env('ALARM_CLOCK_TIMEOUT_NOTICE', 5),
        'warning' => env('ALARM_CLOCK_TIMEOUT_WARNING', 10),
    ],

];
